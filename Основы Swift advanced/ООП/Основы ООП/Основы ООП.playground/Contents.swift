import UIKit

// MARK: Task1

//---Инкапсуляция---//

/*
 Инкапсуляция – это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали реализации от пользователя.
 Пример: подача электроэнергии для потребителей в квартиру.
        Для потребителя public, пожалуй будет являться только
        лишь действие "воткнуть вилку в розетку". Такие данные
        как "трасса провода", "сечение провода", "номинал
        автоматического выключателя" и т.п. будут инкапсу-
        лированы, для обеспечения безопасности работы системы
        и безопасности самого пользователя.
        Еще одним примером может быть автомойка самообслуживания,
        где пользователю достаточно знать, что для подачи воды
        ему необходимо нажать на курок, а такие вещи как:
        хранилище воды, давление в системе и т.п. от него скрыто
 */

//---Абстракция---//

/*
 Абстрагирование – это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция – это набор всех таких характеристик.
 Пример: питьё кофе. Клиент, когда покупает в кафе кофе не будет
        задумываться о процентном содержании кофеина в зернах,
        температуре воды, настройках кофе-машины, материале изго-
        товления ложки и т.п. Он будет пользоваться лишь неско-
        лькими параметрами: размешивать ложкой сахар, поставить
        чашку на блюдце после окончания приема напитка.
        Вторым примером можно рассмотреть ТО у диллера. Владелец
        авто должен знать только то, что ему необходимо предо-
        ставить машину в определенные промежутки времени/пробега
        авто, а информация о том, что будут делать с машиной,
        какое масло будут заливать и т.п. ему не важно.
 */

//---Полиморфизм---//

/*
 Полиморфизм – это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.
 Пример: процесс предполетной подготовки в аэропорту. Человек,
        который часто летает, вероятно заметил одинаковые процедуры
        предполетной подготовки в аэропортах. Ему абсолютно не
        важно, в каком городе и какой стране он находится, он
        знает наверняка, что в Стамбуле, Москве и Пекине, сначала
        ему нужно пройти рамку на входе в здание аэропорта, затем
        пройти регистрацию, после чего преполетный досмотр, затем
        посадка в самолет и т.п. Разницой может быть лишь наличие
        таможенной зоны, если полет предстоит международным.
        Еще одним примером может послужить процесс ремотна ПК в СЦ.
        Специалист знает, что без основных элементов, таких как
        ЦПУ, ОЗУ, БП и т.п. ни один компьютер не может существовать,
        и поэтому, для него не составит труда разобраться в новой
        модели ПК, ведь в нем было добавлена лишь активная система
        охлаждения и еще одна планка ОЗУ.
 */

//---Наследование---//

/*
 Наследование – это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым или родительским. Новый класс – потомком, наследником или производным классом.
 Пример: приготовление торта. Каждая домохозяйка проходила путь
        эксперементов с рецептом того или иного торта, однажды
        ей удалось добиться идеального рецепта бисквита. Но в
        один момент, дети попросили шоколадный торт, и домохо-
        зяйке совсем не обязательно по новой придумывать рецепт
        бисквита заново, можно взять за основу уже имеющийся рецепт
        и добавить в него какао, и т.п.
        Второй пример - схема быстрого прохождения трассы. Любой
        пилот в автоспорте начинает свою карьеру с азов, таких как
        прохождение поворота по определенной траектории, правильный
        старт, для исключения пробуксовывания колес и одновременно
        максимально быстро, чтобы не отстать от соперников и т.п.
        Но стоит изменить тип покрытия трассы, например с асфальта
        на песок, водителю необходмо изменить стиль вождения, например,
        сбавить общую скорость, учитывать повышенную сыпучесть, и как
        правило увеличенный тормозной путь, но такие параметры как
        прохождение поворотов и дозирование "газа" на старте остаются
        неизменными.
 */


// MARK: Task2


//---Класс---//

/*
 Класс – это способ описания сущности, определяющий состояние и поведение, зависящее от этого состояния, а также правила для взаимодействия с данной сущностью (контракт).
 Пример: Предположим, мы хотим открыть кафе. Известно, что оно
        должно иметь барную стойку, кассовый аппарат, кофемашину,
        сотрудников, столы, стулья и т.п. А так же, мы знаем, как
        высе вышеперечисленное должно работать: за что отвечает
        каждый сотрудник, где должны стоять слулья, столы и т.п.
        Результатом нашей работы будет некоторый эскиз. Мы только что
        разработали то, что в ООП называется классом. С точки зрения
        программирования класс можно рассматривать как набор данных
        (полей, атрибутов, членов класса) и функций для работы с
        ними (методов). В нашем случае, класс будет отображать
        сущность – кафе. Атрибутами класса будут являться стол,
        стул, официант, кофемашина и т.д. Методами класса будет
        «сделать капучино», «убрать со стола», а также «произвести
        чистку кофемашины».
 */

//---Объект---//

/*
 Объект (экземпляр) – это отдельный представитель класса, имеющий конкретное состояние и поведение, полностью определяемое классом.
 Пример: возьмем за основу пример из "Класса" с кафе. Говоря простым
        языком, объект имеет конкретные значения атрибутов и методы,
        работающие с этими значениями на основе правил, заданных в классе.
        В данном примере, если класс – это некоторое абстрактное кафе
        из «мира идей», то объект – это конкретное кафе с названием
        "Кулибин", которое расположено на улице Ленина 6.
 */

//---Свойства объектов---//

/*
 Пример: для разнообразия приведем другой пример - лифт и для лучшего понятия,
        немного повторимся. Итак, класс — это проект лифта. Именно проект.
        Ну, т.е., то, каким он будет. У него есть высота, ширина, скорость — это свойства.
 */

//---Методы---//

/*
 Пример: в продолжении примера о лифте: Он (лифт) умеет ездить — вверх/вниз, это методы.
        Далее хочу немного дополнить, и немного повторюсь: То, что стоит у нас в домах —
        это экземпляры класса «Лифт», у которых есть свой номер (у каждого). А интерфейс
        — это кнопки. По проекту мы можем наштамповать этих лифтов столько, сколько угодно. Можем
        менять им в процессе цвет двери, например (паблик чтение/запись свойства),
        но не можем менять скорость, которая постоянна (паблик рид свойство). У него
        есть куча внутренних свойств, которые нам неведомы, но благодаря им лифт работает.
 */
